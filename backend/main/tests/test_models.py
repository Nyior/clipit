from django.test import TestCase
from main.models import Url, Client
import datetime


class UrlModelTest(TestCase):
    """ This tests the Url model """

    @classmethod
    def setUpTestData(cls):
        """
        this method sets up the data to be used across 
        multiple methods"""
        cls.url = Url.objects.create(
                                    long_url="https://nyior-clement.netlify.app/", 
                                    shortcode="hj88ty")

    def test_raises_exception_for_invalid_urls(self):
        """sees if the classes raises an exception for invalid urls"""
        with self.assertRaises(Exception):
            Url.objects.create(
                                long_url="an invalid url", 
                                shortcode=None)
    
    def test_raises_exception_for_null_shortcode(self):
        """sees if the classes raises an exception for null shortcode"""
        with self.assertRaises(Exception):
            Url.objects.create(
                                long_url="https://nyior-clement.netlify.app/", 
                                shortcode=None)

    def tests_shortcode_is_alphanum(self):
        """checks if the shortcode submitted by a user or
        generated by the system only contains alpha-nums"""
        self.assertTrue(self.url.shortcode.isalnum())

    def test_object_created(self):
        """tests if object has been created""" 
        self.assertTrue(isinstance(self.url, Url))
        self.assertEqual(
                          self.url.__unicode__(), 
                          self.url.shortcode)

    def test_shortcode_is_shorter(self):
        """test that the generated short code is shorter than
        the original url"""
        self.assertLess(
                        len(self.url.shortcode), 
                        len(self.url.long_url))

    def test_visited(self):
        """ test that visited function increases number of hits
        by 1"""
        hits = self.url.hits
        self.url.visited()
        new_hits = self.url.hits
        
        self.assertTrue((new_hits-hits) == 1)

    def test_get_absolute_url(self):
        # This will also fail if long_url isn't returned.
        self.assertEqual(
                          self.url.get_absolute_url(), 
                          self.url.long_url)


from django.test import TestCase
from main.models import Url, Client
import datetime


class ClientModelTest(TestCase):
    """This tests the Client model """

    @classmethod
    def setUpTestData(cls):
        """
        this method sets up the data to be used across 
        multiple methods"""
        cls.client = Client.objects.create(clinet_id="random")

    def test_object_created(self):
        """tests if object has been created""" 
        self.assertTrue(isinstance(self.client, Client))
        self.assertEqual(
                          self.client.__unicode__(), 
                          self.client.client_id)